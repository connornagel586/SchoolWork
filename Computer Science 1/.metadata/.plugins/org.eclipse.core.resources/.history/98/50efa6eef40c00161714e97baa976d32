
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
/**
 * @author cnagel
 *
 */
public class PlayList implements PlayListInterface{

	private String name = "";
	private int playCount = 0;
	ArrayList<Song> songList;
	
public PlayList(String name){
		this.name = name;
		playCount = 0;
		songList = new ArrayList<Song>();
		
		}
public PlayList(File file){
	this.playCount = 0;
	songList = new ArrayList<Song>();
	try {
		Scanner scan = new Scanner(file);
		name = scan.nextLine().trim();
		
		while(scan.hasNextLine()) {
			
			String title = scan.nextLine().trim();
			String artist = scan.nextLine().trim();
			int playtime = Integer.parseInt(scan.nextLine().trim());
			String songname = scan.nextLine().trim();
			Song somenewsongIjustmade = new Song(title, artist, playtime, songname);
			this.addSong(somenewsongIjustmade);
		}
		scan.close();
	} catch (FileNotFoundException e) {
		System.err.println("Failed to load playlist. " + e.getMessage());
	}
	
}


/**
 * @return name of playlist
 */
public String getName(){
	return name;
}
/**
 * @return songs contained in playlist
 */
public ArrayList<Song> getSongList(){
	return songList;
}
/**
 * @return playcount of playlist songs
 */
public int getPlayCount(){
	return playCount;
}
/**
 * @param sets name of playlist
 */
public void setName(String name){
	this.name = name;
}
/**
 * @param adds song to playlist
 */
public void addSong(Song s)
{
   songList.add(s);
}
/**
 * @param removes song from playlist in location 'id'
 */
public void removeSong(int id)
{
    if(id < getNumSongs()){
    	songList.remove(id);
    }
}
/**
 * @return number of songs on playlist
 */
public int getNumSongs()
{
     int size = songList.size();
     return size;
}

/**
 * Plays all songs on playlist
 */
public void playAll()
{
   for(Song i: songList){
	i.play();
	  playCount++; 
   } 
}
public String toString(){
	if (getNumSongs() > 0){
	return "------------------\n" + "Test list " +"(" + getNumSongs() + " songs)" + "\n"
	+ "------------------\n" + songList.toString();}
	else {return "------------------\n" + "Test list " +"(" + getNumSongs() + " songs)" + "\n"
			+ "------------------\n" + "There are no songs." + "\n------------------\n" ;}

}


/**
 * Added for P5
 * @return The total play time (in seconds)
 */
public int getTotalPlayTime(){
	int sum = 0;
	for(int i = 0; i< songList.size(); i++){
		int time = songList.get(i).getPlayTime();
		sum += time;
		
	}

	return sum;
	
	
}



/**
 * Returns the songlist. This is not a copy, so be careful!
 * @return A reference to the songlist.
 */


/**
 * Added for P5.
 * Returns an array of all the songs in the playlist.
 * @return An array of songs.
 */
public Song[] getSongArray(){
	
	Song[] copy = new Song[songList.size()];

	for (int i = 0; i < songList.size(); i++) {

		copy[i] = songList.get(i);
	}
	return copy;
}

/**
 * Added for P5.
 * Moves the song at the given index to the previous index in the list (index - 1). All other elements
 * in the list will be shifted. Does nothing if the list is empty or the given index is already
 * the first in the list (e.g. 0).
 * @param index The index of the song to move.
 * @return The new index of the song (after the move).
 */
public int moveUp(int index){
	 if(index = 0){}
	 else if (){= songList.;
	 
	 
	 }
	 }

/**
 * Added for P5.
 * Moves the song at the given index to the next index in the list (index + 1). All other elements
 * in the list will be shifted. Does nothing if the list is empty or the given index is already
 * the last in the list (e.g. songList.size()-1).
 * @param index The index of the song to move.
 * @return The new index of the song (after the move).
 */
public int moveDown(int index){}

/**
 * Added for P5.
 * Returns a 2 dimensional musical square. The dimension of the square is calculated based on the number of
 * songs in the playlist. If the number of songs in the list are not a square number, then the remaining slots
 * are filled starting with the first song.
 *
 * <p>
 * For example, if the playlist contains 7 songs, the generated array would contain songs in the following
 * order.
 * </p>
 *
 * <pre>
 * song0 song1 song2
 * song3 song4 song5
 * song6 song0 song1
 * </pre>
 * @return - the 2 dimensional array of songs.
 */
public Song[][] getMusicSquare(){}
}